<?php

namespace App\Repository;


use App\Entity\Utilisateur;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\PasswordUpgraderInterface;

/**
 * UtilisateurRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilisateurRepository extends ServiceEntityRepository implements PasswordUpgraderInterface
{
    const CASE_STATUT = "(CASE
                WHEN utilisateur.enabled=1 AND utilisateur.locked=0 THEN 'Actif'
                WHEN utilisateur.enabled=1 AND utilisateur.locked=1 THEN 'Bloqué'
                WHEN utilisateur.enabled=0 THEN 'Inactif'
                ELSE '' END)";

    const CASE_ROLE = "(CASE
                WHEN utilisateur.roles like '%\"ROLE_ADMIN\"%' THEN 'Administrateur'
                WHEN utilisateur.roles like '%\"ROLE_GESTIONNAIRE\"%' THEN 'Gestionnaire'
                ELSE '' END)";

    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Utilisateur::class);
    }

    // Retourne tous les utilisateurs Ministere actifs
    public function findUtilisateurs(array $roles = [])
    {
        $qb = $this->createQueryBuilder('u');

        $qb->where('u.enabled = 1');        	// utilisateur actif

        if (!empty($roles)) {
            $where = '';
            foreach ($roles as $i => $role) {
                if ($i > 0) {
                    $where .= ' OR ';
                }

                $where .= 'u.roles LIKE :'.$role;
                $qb->setParameter($role, '%"'.$role.'"%');
            }
            $qb->andWhere($where);
        }

        return $qb->getQuery()->getResult();
    }


    // Retourne tous les utilisateurs VIP
    public function findUtilisateursByVip()
    {
        return $this->createQueryBuilder('u')
            ->where('u.roles LIKE :ROLE_ADMIN_VIP')
            ->andWhere('u.enabled = 1')			// utilisateur non expiré
            ->setParameter('ROLE_ADMIN_VIP', '%"ROLE_ADMIN_VIP"%')
            ->getQuery()
            ->getResult();
    }

    // Retourner les utilisateurs non supprimés qui n'ont pas le rôle admin
    public function getUsersSaufAdmin()
    {
        $qb = $this->createQueryBuilder('u')
            ->addSelect('u.civilite')
            ->addSelect('u.nom')
            ->addSelect('u.prenom')
            ->addSelect('u.email')
            ->addSelect('u.roles')
            ->addSelect('u.enabled')
            ->where('u.roles not LIKE :ROLE_ADMIN')
            ->andWhere('u.enabled = 1')			// utilisateur actif
            ->setParameter('ROLE_ADMIN', '%"ROLE_ADMIN"%')
            ->addOrderBy('u.nom')
            ->addOrderBy('u.prenom');

        return $qb->getQuery()->getResult();
    }

    // Retourner les utilisateurs non supprimés qui n'ont pas le rôle admin
    public function getUsers(bool $isAdmin = false)
    {
        $qb = $this->createQueryBuilder('u')
            ->addSelect('u.civilite')
            ->addSelect('u.nom')
            ->addSelect('u.prenom')
            ->addSelect('u.email')
            ->addSelect('u.roles')
            ->addSelect('u.enabled');
        if (!$isAdmin) {
            $qb = $qb->andwhere('u.roles LIKE :ROLE_ADMIN OR u.roles LIKE :ROLE_MIN')
                ->andWhere('u.enabled = 1')			// utilisateur actif
                ->setParameter('ROLE_ADMIN', '%"ROLE_MIN_VAL"%')
                ->setParameter('ROLE_MIN', '%"ROLE_MIN"%');
        }

        $qb->andWhere('u.enabled = 1')			// utilisateur actif
            ->addOrderBy('u.nom')
            ->addOrderBy('u.prenom');

        return $qb->getQuery()->getResult();
    }


    public function upgradePassword(PasswordAuthenticatedUserInterface $user, string $newEncodedPassword): void
    {
        // set the new encoded password on the User object
        $user->setPassword($newEncodedPassword);

        // execute the queries on the database
        $this->getEntityManager()->flush($user);
    }

    public function search(string $search, int $start, int $length, array $order, bool $isAdmin = false)
    {
        $colonnes = ['utilisateur.civilite', 'utilisateur.nom', 'utilisateur.prenom', 'utilisateur.email', 'role', 'statut'];

        $qb = $this->createQueryBuilder('utilisateur')
            ->addSelect(self::CASE_STATUT.' AS statut')
            ->addSelect(self::CASE_ROLE.' AS role')
            ->addSelect(self::CASE_STATUT.' AS HIDDEN statut_h')

            ->orderBy($colonnes[$order[0]['column']], $order[0]['dir'])
        ;

        $qb = $this->addSearchWhere($qb, $search, $isAdmin);

        $query = $qb->getQuery()->setMaxResults($length)->setFirstResult($start);

        return $query->getResult();
    }

    public function searchCount(bool $isAdmin = false, string $search = null)
    {
        $qb = $this->createQueryBuilder('utilisateur')
            ->select('COUNT(utilisateur)')
        ;

        $qb = $this->addSearchWhere($qb, $search, $isAdmin);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function addSearchWhere(QueryBuilder $qb, ?string $search, bool $isAdmin)
    {
        $colonnesTexte = ['utilisateur.civilite', 'utilisateur.nom', 'utilisateur.prenom', 'utilisateur.email'];

        if (strlen($search) > 0) {
            $orXSearch = $qb->expr()->orX();
            $conditions = [];

            foreach ($colonnesTexte as $colonne) {
                $conditions[] = $qb->expr()->like($colonne, ':SEARCH');
                $qb->setParameter('SEARCH', '%'.$search.'%');
            }

            $orXSearch->addMultiple($conditions);
            $qb->andWhere($orXSearch);
        }

        if (!$isAdmin) {
            $qb = $qb
                ->andwhere('utilisateur.roles LIKE :ROLE_ADMIN OR utilisateur.roles LIKE :ROLE_MIN')
                ->andWhere('utilisateur.enabled = 1')			// utilisateur actif
                ->setParameter('ROLE_ADMIN', '%"ROLE_MIN"%')
                ->setParameter('ROLE_MIN', '%"ROLE_MIN"%');
        }

        return $qb;
    }

    // Méthode pour compter le nombre d'utilisateurs
    public function countAllUsers(): int
    {
        // Utilise le QueryBuilder pour faire la requête
        return $this->createQueryBuilder('u')
            ->select('COUNT(u.id)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    // Méthode pour récupérer les utilisateurs créés depuis cette semaine
    public function findUsersCreatedSinceThisWeek(): array
    {
        $now = new \DateTime();
        $startOfWeek = (clone $now)->modify('this week');

        return $this->createQueryBuilder('u')
            ->where('u.createdAtUser >= :startOfWeek')
            ->setParameter('startOfWeek', $startOfWeek)
            ->getQuery()
            ->getResult();
    }

    // Méthode pour récupérer les utilisateurs créés depuis la semaine dernière
    public function findUsersCreatedSinceLastWeek(): array
    {
        $now = new \DateTime();
        $lastWeek = (clone $now)->modify('-1 week');

        return $this->createQueryBuilder('u')
            ->where('u.createdAtUser >= :lastWeek')
            ->setParameter('lastWeek', $lastWeek)
            ->getQuery()
            ->getResult();
    }
}
