<?php


namespace App\Repository;

    use App\Entity\Produit;
    use App\Entity\Sales;

    use App\EnumTypes\EnumGradeType;
    use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
    use Doctrine\ORM\QueryBuilder;
    use Doctrine\ORM\Tools\Pagination\Paginator;
    use Doctrine\Persistence\ManagerRegistry;
    use Psr\Log\LoggerInterface;
    use Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface;
    use Symfony\Contracts\Cache\CacheInterface;
    use Symfony\Contracts\Cache\ItemInterface;

    /**
     * AgentRepository.
     *
     * This class was generated by the Doctrine ORM. Add your own custom
     * repository methods below.
     */
class ProduitRepository extends ServiceEntityRepository
{
    protected LoggerInterface $logger;
    protected AuthorizationCheckerInterface $authorizationChecker;
    private CacheInterface $cache;

    public function __construct(
        ManagerRegistry $registry,
        LoggerInterface $logger,
        AuthorizationCheckerInterface $authorizationChecker,
        CacheInterface $cache
    ) {
        parent::__construct($registry, Produit::class);
        $this->logger = $logger;
        $this->authorizationChecker = $authorizationChecker;
        $this->cache = $cache;
    }

    public function findByNonSupprime()
    {
        $qb = $this->createQueryBuilder('p')
            ->andWhere('p.supprime = :SUPPRIME')
            ->setParameter('SUPPRIME', 0)
            ->orderBy('p.nom')
            ->addOrderBy('p.prix');

        return $qb->getQuery()->getResult();
    }


    public function search($motcle)
    {
        $qb = $this->createQueryBuilder('p');

        $qb->where('p.nom LIKE :motcle OR p.status LIKE :motcle OR p.prix LIKE :motcle OR p.quantite LIKE :motcle')
            ->andWhere('p.supprime = 0')
            ->orderBy('p.nom', 'ASC')
            ->setParameter('motcle', '%' . $motcle . '%');

        return $qb->getQuery()->getResult();
    }

    public function searchPaginated($search, $start, $length, $order, $prix = null, $isMobile = false): Paginator
    {
        $cacheKey = sprintf('search_paginated_%s_%d_%d_%s_%s_%s',
            $search,
            $start,
            $length,
            json_encode($order),
            $prix,
            $isMobile
        );
        
        if ($isMobile) {
            return $this->cache->get($cacheKey, function (ItemInterface $item) use ($search, $start, $length, $order, $prix, $isMobile) {
                $item->expiresAfter(1800); // Cache pour 30 minutes pour mobile
                
                $colonnes = ['p.prix', 'p.quantite', 'p.description', 'p.imageFilename'];
                
                $qb = $this->createQueryBuilder('p')
                    ->where('p.supprime = 0');

                if ($prix) {
                    $qb->andWhere('p.prix = :PRIX')
                        ->setParameter('PRIX', $prix);
                }

                if ($isMobile) {
                    $qb->select('p.id', 'p.nom', 'p.prix', 'p.imageFilename');
                }

                if (isset($order[0]['column']) && isset($colonnes[$order[0]['column']])) {
                    $qb->orderBy($colonnes[$order[0]['column']], $order[0]['dir']);
                } else {
                    $qb->orderBy('p.nom', 'ASC');
                }

                if ($search) {
                    $qb = $this->addSearchWhere($qb, $search);
                }

                $query = $qb->getQuery()
                    ->setMaxResults($length)
                    ->setFirstResult($start);

                return new Paginator($query, true);
            });
        }
        
        // Version non cachée pour desktop
        $colonnes = ['p.prix', 'p.quantite', 'p.description', 'p.imageFilename'];
        
        $qb = $this->createQueryBuilder('p')
            ->where('p.supprime = 0');

        if ($prix) {
            $qb->andWhere('p.prix = :PRIX')
                ->setParameter('PRIX', $prix);
        }

        // Tri
        if (isset($order[0]['column']) && isset($colonnes[$order[0]['column']])) {
            $qb->orderBy($colonnes[$order[0]['column']], $order[0]['dir']);
        } else {
            $qb->orderBy('p.nom', 'ASC');
        }

        // Recherche
        if ($search) {
            $qb = $this->addSearchWhere($qb, $search);
        }

        $query = $qb->getQuery()
            ->setMaxResults($length)
            ->setFirstResult($start);

        return new Paginator($query, true);
    }

    public function getMobileProducts($limit = 5)
    {
        $cacheKey = sprintf('mobile_products_%d', $limit);
        
        return $this->cache->get($cacheKey, function (ItemInterface $item) use ($limit) {
            $item->expiresAfter(3600); // Cache pour 1 heure
            
            return $this->createQueryBuilder('p')
                ->select('p.id', 'p.nom', 'p.prix', 'p.imageFilename')
                ->where('p.supprime = 0')
                ->orderBy('p.dateCreation', 'DESC')
                ->setMaxResults($limit)
                ->getQuery()
                ->getResult();
        });
    }

    public function searchCount(?string $search, ?int $prix = null): int
    {
        $qb = $this->createQueryBuilder('p')
            ->select('COUNT(p)')
            ->where('p.supprime = 0');

        if ($prix) {
            $qb->andWhere('p.prix = :PRIX')
                ->setParameter('PRIX', $prix);
        }

        if ($search) {
            $qb = $this->addSearchWhere($qb, $search);
        }

        return (int) $qb->getQuery()->getSingleScalarResult();
    }

    private function addSearchWhere(QueryBuilder $qb, ?string $search): QueryBuilder
    {
        if (!empty($search)) {
            $qb->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->like('p.nom', ':search'),
                    $qb->expr()->like('p.description', ':search'),
                    $qb->expr()->like('p.prix', ':search')
                )
            )
            ->setParameter('search', '%' . $search . '%');
        }

        return $qb;
    }

    /*
     * Retourne les agents d'un ministère éligibles au deuxième grade
     */
    public function findAllproduitss($exclude = [])
    {
        $qb = $this->createQueryBuilder('p')
            ->andWhere('p.supprime = 0')
            ->orderBy('p.nom')
            ->addOrderBy('p.prix');

        if (!empty($exclude)) {
            $qb->andWhere($qb->expr()->notIn('p.id', $exclude));
        }

        return $qb->getQuery()->getResult();
    }


    /*
     * Retourne le nombre d'agents ayant un échelon donné
     */
    public function getNbproduitssSelonEchelon($echelon, $campagne)
    {
        $qb = $this->createQueryBuilder('p');

        $qb->select('COUNT(p)')
            ->Where($qb->expr()->lte('p.dateEntreeEchelon', ':DATE_ENTREE_ECHELON')) //gte: greater than or equal >=
            ->andWhere('p.supprime = 0')
            ->andWhere('p.echelon = :ECHELON')
            ->setParameter('ECHELON', $echelon)
            ->setParameter('DATE_ENTREE_ECHELON', ($campagne->getAnneeReference() - 1) . '-12-31');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function findByproduitsEchelon($grade = null, $echelon = null, $echelonNotIn = [])
    {
        $qb = $this->createQueryBuilder('agent')
            ->where('agent.supprime = :SUPPRIME')
            ->setParameter('SUPPRIME', 0);

        if ($grade) {
            $qb->andWhere('agent.grade = :GRADE')
                ->setParameter('GRADE', $grade);
        }

        if ($echelon) {
            $qb->andWhere('agent.echelon = :ECHELON')
                ->setParameter('ECHELON', $echelon);
        }

        if (!empty($echelonNotIn)) {
            $qb->andWhere('agent.echelon NOT IN (:ECHELON_NOT_IN)')
                ->setParameter('ECHELON_NOT_IN', $echelonNotIn);
        }

        $qb->orderBy('agent.nomUsage')
            ->addOrderBy('agent.prenom');

        return $qb->getQuery()->getResult();
    }

    private function countproduitss(
        $grade = null,
        $prix = null,
        $prixNotIn = [],
        $nom = null
    )
    {
        $qb = $this->createQueryBuilder('produit');

        $qb->select('COUNT(agent)')
            ->where('produit.supprime = 0');


        if ($prix) {
            $qb->andWhere('produit.echelon = :ECHELON')
                ->setParameter('ECHELON', $prix);
        }

        if (!empty($prixNotIn)) {
            $qb->andWhere('produit.prix NOT IN (:PRIX_IN)')
                ->setParameter('PRIX_IN', $prixNotIn);
        }


        if ($nom) {
            $qb->join('produit.nom', 'nom')
                ->andWhere('nom = :NOM')
                ->setParameter('NOM', $nom);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    /*
     * Retourne le nombre d'agents AGs
     */

    public function countCongeUtilisateur($nom = null): int
    {
        $qb = $this->createQueryBuilder('c');

        $qb->select('COUNT(c)')
            ->where('c.supprime = 0');

        if (null !== $nom) {
            $qb->join('c.utilisateur', 'nom')
                ->andWhere('nom = :NOM')
                ->setParameter('NOM', $nom);
        }


        return $qb->getQuery()->getSingleScalarResult();
    }


    public function getMoyenneAge(
        $grade = null,
        $echelon = null,
        $civilite = null,
        $gradeNotIn = []
    ): float
    {
        $dateReference = (new \DateTime())->format('d/m/Y');

        $qb = $this->createQueryBuilder('agent');

        $qb->select("AVG( DATE_DIFF(TO_DATE(:DATE_REFERENCE, 'dd/mm/YYYY'), agent.dateNaissance ) ) /365")
            ->where('agent.supprime = 0')
            ->setParameter('DATE_REFERENCE', $dateReference);


        if ($grade) {
            $qb->andWhere('agent.grade = :GRADE')
                ->setParameter('GRADE', $grade);
        }

        if ($echelon) {
            $qb->andWhere('agent.echelon = :ECHELON')
                ->setParameter('ECHELON', $echelon);
        }

        if ($civilite) {
            $qb->join('agent.civiliteIngres', 'civilite')
                ->andWhere('civilite = :CIVILITE_IDENTIFIANT')
                ->setParameter('CIVILITE_IDENTIFIANT', $civilite);
        }

        if (!empty($gradeNotIn)) {
            $qb->andWhere('agent.grade NOT IN(:GRADE_NOT_IN)')
                ->setParameter('GRADE_NOT_IN', $gradeNotIn);
        }

        return round($qb->getQuery()->getSingleScalarResult(), 1);
    }


    public function countproduitssByTypeFonctionsOccupees($typeFonctionsOccupees = null): int
    {
        $qb = $this->createQueryBuilder('agent');

        $qb->select('COUNT(agent)')
            ->where('agent.supprime = 0');

        if ($typeFonctionsOccupees) {
            $qb->andWhere('agent.typeFonctionsOccupees = :TYPE_FONCTIONS_OCCUPEES')
                ->setParameter('TYPE_FONCTIONS_OCCUPEES', $typeFonctionsOccupees);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countproduitssByFonctionsOccupees($fonctionsOccupees = null): int
    {
        $qb = $this->createQueryBuilder('agent');

        $qb->select('COUNT(agent)')
            ->where('agent.supprime = 0');

        if ($fonctionsOccupees) {
            $qb->andWhere('agent.fonctionsOccupees = :FONCTIONS_OCCUPEES')
                ->setParameter('FONCTIONS_OCCUPEES', $fonctionsOccupees);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function findByIdentite(string $nomNaissance, string $prenom, \DateTimeInterface $dateNaissance)
    {

        $qb = $this->createQueryBuilder('agent');

        if ($nomNaissance) {
            $qb->andWhere('agent.nomNaissance = :NOM_NAISSANCE')
                ->setParameter('NOM_NAISSANCE', $nomNaissance);
        }

        if ($prenom) {
            $qb->andWhere('agent.prenom = :PRENOM')
                ->setParameter('PRENOM', $prenom);
        }

        if ($dateNaissance) {
            $qb->andWhere('agent.dateNaissance = :DATE_NAISSANCE')
                ->setParameter('DATE_NAISSANCE', $dateNaissance);
        }

        $result = $qb->getQuery()->getResult();

        if (count($result) > 0) {
            return $result[0];
        }

        return null;
    }

    public function searchproduitss(string $query)
    {
        return $this->createQueryBuilder('p')
            ->where('p.nomNaissance LIKE :query OR p.prenom LIKE :query OR p.email LIKE :query')
            ->setParameter('query', '%' . $query . '%')
            ->getQuery()
            ->getResult();
    }

}
